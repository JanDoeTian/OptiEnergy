// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String             @id @default(cuid())
  email            String
  onboarded        Boolean            @default(false)
  userUploads      UserUpload[]
  sites            Site[]
  fpConnectSession FPConnectSession[]
  e3ConnectSession E3ConnectSession[]
}

model UserUpload {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  fileName  String
  fileId    String
  fileUrl   String
  updatedAt DateTime @default(now())
}

enum SiteVerificationStatus {
  PENDING
  VERIFIED
}

model Site {
  id                 String                 @id @default(cuid())
  siteName           String
  user               User                   @relation(fields: [userId], references: [id])
  userId             String
  address            Address                @relation(fields: [addressId], references: [id])
  addressId          String
  mpxn               MPXN                   @relation(fields: [mpxnId], references: [id])
  mpxnId             String
  moveInDate         DateTime
  verificationStatus SiteVerificationStatus @default(PENDING)
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  meter              Meter                  @relation(fields: [meterId], references: [id])
  meterId            String
}

enum MeterType {
  ELECTRICITY
  GAS
}

model MPXN {
  id        String   @id @default(cuid())
  mpxn      String   @unique
  meters    Meter[]
  site      Site[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Meter {
  id                        String                      @id @default(cuid())
  deviceId                  String                      @unique
  deviceManufacturer        String
  deviceModel               String
  deviceStatus              String
  deviceType                String
  mpxn                      MPXN                        @relation(fields: [mpxnId], references: [id]) // Each meter has one MPXN
  mpxnId                    String
  addressIdentifier         String
  postCode                  String
  meterReadings             MeterReading[]
  sites                     Site[]
  meterIntradayStatistics   MeterIntradayStatistics[]
  meterWeekOfYearStatistics MeterWeekOfYearStatistics[]
}

model CronError {
  id        String   @id @default(cuid())
  from      String
  message   String
  createdAt DateTime @default(now())
}

model MeterReading {
  id             String   @id @default(cuid())
  meter          Meter    @relation(fields: [meterId], references: [id])
  meterId        String
  primaryValue   Float
  secondaryValue Float    @default(0)
  unit           String
  timestamp      DateTime
  createdAt      DateTime @default(now())
}

model MeterWeekOfYearStatistics {
  id                 String   @id @default(cuid())
  meter              Meter    @relation(fields: [meterId], references: [id])
  meterId            String
  weekOfYear         Int
  mean               Float
  median             Float
  standardDeviation  Float
  weekStartTimestamp DateTime
  createdAt          DateTime @default(now())

  @@index([meterId, weekOfYear])
}

model MeterIntradayStatistics {
  id                String   @id @default(cuid())
  meter             Meter    @relation(fields: [meterId], references: [id])
  meterId           String
  minuteOfHour      Int
  hourOfDay         Int
  weekOfYear        Int
  mean              Float
  median            Float
  standardDeviation Float
  upper95           Float
  lower95           Float
  upper90           Float
  lower90           Float
  upper80           Float
  lower80           Float
  upper70           Float
  lower70           Float
  upper50           Float
  lower50           Float
  createdAt         DateTime @default(now())
}

model Address {
  id                String   @id @unique
  latitude          Float
  longitude         Float
  formattedAddress  String[]
  thoroughfare      String
  buildingName      String
  subBuildingName   String
  subBuildingNumber String
  buildingNumber    String
  lineOne           String
  lineTwo           String
  lineThree         String
  lineFour          String
  postcode          String
  locality          String
  townOrCity        String
  county            String
  district          String
  country           String
  residential       Boolean
  site              Site[]
}

enum E3ConnectSessionStatus {
  PENDING
  SUCCESS
  FAILED
}

model E3ConnectSession {
  id            String                 @id @default(uuid())
  user          User                   @relation(fields: [userId], references: [id])
  userId        String
  status        E3ConnectSessionStatus @default(PENDING)
  failureReason String?
}

model FPConnectSession {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  siteName  String
  fp_cot    String?
  addressId String
  fp_status String   @default("new")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([fp_cot])
}

model InternalKey {
  id       String   @id @default(cuid())
  key      String
  expireAt DateTime
}
